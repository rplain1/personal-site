{
  "hash": "9e836085bd04295c4501b149c83ca3ca",
  "result": {
    "markdown": "---\ntitle: \"Modeling Airports\"\nauthor: \"Ryan Plain\"\ndate: \"2024-06-01\"\ncategories: [Flights, R]\ndescription: \"Begin simmulating passenger and bag traffic\"\nimage: \"image.png\"\ndraft: true\nformat: \n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\n    df-print: kable\n\n---\n\n\n## Aviation and Simulation\n\nI was once asked during my time working with Southwest Airlines how I got into aviation. At the time I never thought of myself associated with aviation, only data. After leaving, I soon realized that I loved aviation and working for airlines. Okay, maybe not all of the emissions, harm to environment, and how they probably lobby against trains... but I do love all the applications of simulation! Luckily there is the [nycflights13](https://github.com/tidyverse/nycflights13) publicly available to work with.\n\nEverything I will discuss is well known and industry standard. Transportation Security Administration (TSA) and the International Association of Baggage System Companies (IABSC) have a lot of this documented, which you can read about [here](https://iabsc.org/wp-content/uploads/2021/04/Planning-Guidelines-and-Design-Standards-for-Checked-Baggage-Inspection-Systems-V7.0.pdf). \n\n**NOTE:** I intend to have a series of different topics in simulation, with this being a foundation introduction. When I refer to things out of scope, my plan is to cover it in a later post. Simulation covers topics of uncertainty while also providing data engineering challenges due to the size of data generated. Maybe we can leverage our beloved DuckDB in a future post too. \nLet's get started! \n\n### Flight Schedule\n\nThe foundation for anything we do is the flight schedule. Here is a snapshot of the flight schedule available from the nycflights13 package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\nlibrary(reactable)\n\n\nflights |> \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| year| month| day| dep_time| sched_dep_time| dep_delay| arr_time| sched_arr_time| arr_delay|carrier | flight|tailnum |origin |dest | air_time| distance| hour| minute|time_hour           |\n|----:|-----:|---:|--------:|--------------:|---------:|--------:|--------------:|---------:|:-------|------:|:-------|:------|:----|--------:|--------:|----:|------:|:-------------------|\n| 2013|     1|   1|      517|            515|         2|      830|            819|        11|UA      |   1545|N14228  |EWR    |IAH  |      227|     1400|    5|     15|2013-01-01 05:00:00 |\n| 2013|     1|   1|      533|            529|         4|      850|            830|        20|UA      |   1714|N24211  |LGA    |IAH  |      227|     1416|    5|     29|2013-01-01 05:00:00 |\n| 2013|     1|   1|      542|            540|         2|      923|            850|        33|AA      |   1141|N619AA  |JFK    |MIA  |      160|     1089|    5|     40|2013-01-01 05:00:00 |\n| 2013|     1|   1|      544|            545|        -1|     1004|           1022|       -18|B6      |    725|N804JB  |JFK    |BQN  |      183|     1576|    5|     45|2013-01-01 05:00:00 |\n| 2013|     1|   1|      554|            600|        -6|      812|            837|       -25|DL      |    461|N668DN  |LGA    |ATL  |      116|      762|    6|      0|2013-01-01 06:00:00 |\n| 2013|     1|   1|      554|            558|        -4|      740|            728|        12|UA      |   1696|N39463  |EWR    |ORD  |      150|      719|    5|     58|2013-01-01 05:00:00 |\n\n</div>\n:::\n:::\n\n<br> \n\n##### June 27, 2013\n\nWe have flight counts from every airline for the 3 New York airports throughout 2013. I picked flights from my birthday, June 27, to show flight counts for each station. Certain carriers have a dominant market share, and some carriers do not utilize the station at all. \n\n\n::: {.cell}\n\n```{.r .cell-code}\njune27_flights <- flights |> \n  mutate(dep_dttm = time_hour + minutes(minute)) |> \n  filter(day == 27 , month == 6)\n\njune27_flights |> \n  count(carrier, origin) |> \n  pivot_wider(id_cols = carrier, names_from = origin, values_from = n) |> \n  mutate(across(everything(), \\(x) replace_na(x, 0))) |> \n  arrange(-LGA) |> \n  reactable(\n    bordered = TRUE\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"reactable html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d436528988d6e76371fd\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d436528988d6e76371fd\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"carrier\":[\"DL\",\"MQ\",\"AA\",\"US\",\"EV\",\"UA\",\"WN\",\"B6\",\"FL\",\"9E\",\"F9\",\"YV\",\"AS\",\"HA\",\"VX\"],\"EWR\":[12,8,10,13,128,140,18,18,0,3,0,0,2,0,6],\"JFK\":[64,19,39,8,4,13,0,128,0,41,0,0,0,1,10],\"LGA\":[67,51,47,44,25,25,18,16,9,4,2,2,0,0,0]},\"columns\":[{\"id\":\"carrier\",\"name\":\"carrier\",\"type\":\"character\"},{\"id\":\"EWR\",\"name\":\"EWR\",\"type\":\"numeric\"},{\"id\":\"JFK\",\"name\":\"JFK\",\"type\":\"numeric\"},{\"id\":\"LGA\",\"name\":\"LGA\",\"type\":\"numeric\"}],\"bordered\":true,\"dataKey\":\"80d6c0451a72f8a78e01dfed1e15cdc2\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Understanding the Arrival Curve\n\nAn arrival curve represents the distribution of passenger arrivals before the departure time. Several factors influence how early or close to departure passengers arrive, but these can generally be categorized into three main distributions:\n\n- **Domestic Before 9am** - Domestic flights departing before 9am have tighter distributions, as passengers find it harder to arrive extremely early.\n- **Domestic After 9am** - Off-peak domestic flights (departing during the day or evening) allow passengers ample time to arrive early.\n- **International** - Non-domestic flights, often involving more luggage, customs, and higher stress levels, typically see passengers arriving much earlier.\n\nThe [Planning Guidelines and Design Standards for TSA](https://iabsc.org/wp-content/uploads/2021/04/Planning-Guidelines-and-Design-Standards-for-Checked-Baggage-Inspection-Systems-V7.0.pdf) provide an arrival curve on page 91. As an LLM / AI pessimist, I have to give credit when it is due. To get the arrival curve I copied the table values from the pdf and asked OpenAI's chatGPT to provide code to replicate the table, which worked seamlessly. \n\nThe comparison of the three distributions reveals distinct patterns. Domestic flights have a mode around an hour before departure. In contrast, international flights show passengers arriving much earlier, with a longer tail towards earlier arrivals. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation_colors <- c('#e41a1c', '#377eb8', '#4daf4a')\nstation_colors <- c('#66c2a5', '#fc8d62', '#8da0cb')\n\ndf <- tibble(\n  minutes_prior = rev(c(\">240\", \"240\", \"230\", \"220\", \"210\", \"200\", \"190\", \"180\", \"170\", \"160\", \"150\", \"140\", \"130\", \"120\", \"110\", \"100\", \"90\", \"80\", \"70\", \"60\", \"50\", \"40\", \"30\", \"20\", \"10\")),\n  peak_domestic_8am = c(0.80, 0.26, 0.42, 1.10, 3.08, 6.71, 10.34, 12.87, 13.54, \n                        12.79, 11.21, 8.70, 6.13, 4.11, 2.66, 1.69, 1.10, 0.72, \n                        0.46, 0.32, 0.22, 0.15, 0.11, 0.08, 0.41),\n  off_peak_domestic = c(0.06, 0.30, 0.48, 0.98, 2.10, 4.03, 6.19, 8.16, 9.59, \n                       10.25, 10.08, 9.25, 7.95, 6.44, 5.09, 3.94, 3.06, 2.36, \n                       1.83, 1.43, 1.14, 0.92, 0.74, 0.62, 3.01),\n  international = c(0.22, 0.11, 0.15, 0.28, 0.61, 1.32, 3.08, 5.13, 7.37, \n                   8.93, 10.28, 10.69, 9.75, 8.40, 7.12, 5.74, 4.75, 3.81, \n                   2.92, 2.17, 1.62, 1.19, 0.90, 0.71, 2.77)\n)\n\narrival_curve <- df |> \n    mutate(x = str_extract(minutes_prior, '\\\\d+') |> as.numeric()) |> \n  group_by(minutes_prior = x) |> \n  summarise(\n    across(everything(), sum)\n  ) |> \n  select(-x) |> \n  pivot_longer(-minutes_prior) |> \n  mutate(value = value / 100)\n\narrival_curve |> \n  ggplot(aes(minutes_prior, value, color = name)) +\n  geom_point() +\n  geom_line(linewidth = 2) +\n  labs(\n    title = 'Arrival Curve',\n    subtitle = 'The distribution of minutes prior to departure that a passenger will arrive',\n    x = 'Minutes Prior',\n    y = NULL,\n    color = NULL,\n    fill = NULL,\n  ) +\n  scale_y_continuous(labels = scales::percent_format()) +\n  scale_x_reverse() +\n  theme(legend.position = 'top') \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Simulating Arrivals from the Distribution\n\nOur goal is to simulate arrivals from this distribution to optimize airport operations and planning. The data is binned into 10-minute intervals, which is appropriate for many use cases. \n\nTo simulate arrivals:\n\n1. **Sample from Bins:** Using the table of percentages of passengers arriving in each 10-minute bin, we can sample with replacement from the minutes_prior column, guided by the probabilities from the arrival curve.\n2. **Kernel Density Estimate (KDE):** Calculate a KDE to create a continuous distribution.\n\n**Note:** The KDE may produce some negative values. Although these occurrences are rare, negative times are not possible. Therefore, I filtered out rows with `minutes_prior < 0` and recalculated the percentages, dividing by the sum of all valid percentages for that group.\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0527)\n\narrival_samples <- arrival_curve |> \n  group_by(name) |> \n  nest() |> \n  ungroup() |> \n  mutate(\n    samples = map(.x = data, ~sample(.x$minutes_prior, 1000, replace = TRUE, prob = .x$value))\n  ) |> \n  mutate(\n    d = map(samples, ~density(.x)),\n    density_x = map(d, \"x\"),\n    density_y = map(d, \"y\"),\n    dens = tibble(dens_x = map(d, \"x\"), dens_y = map(d, \"y\"))\n  ) |> \n  ungroup() \n\narrival_kde <- arrival_samples |> \n  select(name, starts_with('density')) |> \n  unnest(c(density_x, density_y)) |> \n  filter(density_x > 0) |> \n  group_by(name) |> \n  mutate(y = density_y / sum(density_y)) |>\n  select(name, minutes_prior = density_x, perc = y) |> \n  ungroup()\n\narrival_kde |> \n  ggplot(aes(minutes_prior, perc, color = name)) +\n  geom_line(linewidth = 2) + \n  labs(\n    title = 'KDE of Arrival Curve',\n    x = 'Minutes Prior',\n    y = NULL,\n    color = NULL,\n    fill = NULL,\n  ) +\n  scale_y_continuous(labels = scales::percent_format()) +\n  scale_x_reverse() + \n  theme(legend.position = 'top')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Load Factors\n\nIn aviation planning, estimating passenger numbers for a flight involves considering two primary factors:\n\n- **Load Factor**: This refers to the percentage of seats occupied on a flight.\n- **Originating Factor**: This factor indicates the proportion of passengers whose journey originates at a particular station. \n\nFor calculation purposes, let's consider an example with 100 seats available on a flight, an 80% load factor, and 90% of passengers originating from the local station.\n\nThe formula for deriving the expected number of passengers is:\n\n*Expected Passengers = Seats × Load Factor × Originating Factor*\n\nSubstituting the given values into the formula:\n\n*Expected Passengers = 100 × 0.80 × 0.90*\n\n*Expected Passengers = 72*\n\nSo, in this scenario, we would expect approximately 72 passengers for the flight.\n\n### Bag Factors\n\nTypically, airlines maintain their own datasets on various factors affecting flight operations. These include market dynamics, flight length, seasonality components, and other variables that influence load factors.\n\nFor this, we will use the table provided in the [PGDS Study](https://iabsc.org/wp-content/uploads/2021/04/Planning-Guidelines-and-Design-Standards-for-Checked-Baggage-Inspection-Systems-V7.0.pdf) on page 395. This gives a breakdown of the average load factor for each flight. Additionally it contains two other factors used later on, which are:\n\n- **Checked Bag Factor**: This represents the percentage of passengers checking bags.\n- **Avg Number of Bags**: This figure indicates the expected number of bags per passenger after accounting for the previously mentioned load factors.\n\nWe'll use this table generate more sampling data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the data\noperator_name <- c(\"Continental Airlines\", \"Alaska Airlines\", \"America West Airlines (domestic destinations)\", \n                   \"United Airlines\", \"XX Airlines\", \"SkyWest Airlines\", \"American Airlines\", \n                   \"JetBlue Airways\", \"Delta Air Lines\", \"America West Airlines (Mexican destinations)\", \n                   \"Aloha Airlines\", \"Horizon Air\", \"Mesa Airlines\", \"ATA Airlines\", \n                   \"United Express/SkyWest Airlines\")\noperator_code <- c(\"CO\", \"AS\", \"HP\", \"UA\", \"XX\", \"OO\", \"AA\", \"B6\", \"DL\", \"HP\", \"AQ\", \"QX\", \"YV\", \"TZ\", \"A296\")\nload_factor <- c(96, 98, 83, 85, 77, 91, 98, 90, 89, 83, 85, 60, 85, 85, 91)\n\npercent_of_parties_checking_pre_gate <- c(75, 80, 84, 45, 34, 79, 90, 90, 92, 100, 97, 77, 51, 64, 66)\naverage_number_of_checked_bags_per_passenger <- c(0.79, 0.71, 0.68, 0.87, 0.92, 0.91, 0.71, 0.90, 0.98, 1.30, 1.30, 0.95, 0.96, 1.23, 0.87)\n\n# Create the data frame\noperator_data <- tibble(airline = operator_name,\n                            carrier = operator_code,\n                            load_factor = load_factor,\n                            check_bag_factor = percent_of_parties_checking_pre_gate,\n                            avg_num_bags = average_number_of_checked_bags_per_passenger) |> \n  mutate(across(contains('factor'), \\(x) x/100))\n\noperator_data\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|airline                                       |carrier | load_factor| check_bag_factor| avg_num_bags|\n|:---------------------------------------------|:-------|-----------:|----------------:|------------:|\n|Continental Airlines                          |CO      |        0.96|             0.75|         0.79|\n|Alaska Airlines                               |AS      |        0.98|             0.80|         0.71|\n|America West Airlines (domestic destinations) |HP      |        0.83|             0.84|         0.68|\n|United Airlines                               |UA      |        0.85|             0.45|         0.87|\n|XX Airlines                                   |XX      |        0.77|             0.34|         0.92|\n|SkyWest Airlines                              |OO      |        0.91|             0.79|         0.91|\n|American Airlines                             |AA      |        0.98|             0.90|         0.71|\n|JetBlue Airways                               |B6      |        0.90|             0.90|         0.90|\n|Delta Air Lines                               |DL      |        0.89|             0.92|         0.98|\n|America West Airlines (Mexican destinations)  |HP      |        0.83|             1.00|         1.30|\n|Aloha Airlines                                |AQ      |        0.85|             0.97|         1.30|\n|Horizon Air                                   |QX      |        0.60|             0.77|         0.95|\n|Mesa Airlines                                 |YV      |        0.85|             0.51|         0.96|\n|ATA Airlines                                  |TZ      |        0.85|             0.64|         1.23|\n|United Express/SkyWest Airlines               |A296    |        0.91|             0.66|         0.87|\n\n</div>\n:::\n:::\n\n\n### Deriving Passenger Numbers\n\nIn this section, we'll start by modeling passenger numbers under the assumption that all passengers are local. While this assumption may oversimplify reality, it serves as a conservative estimate for our analysis. With our data focusing on New York, US stations, this follows certain characteristics of domestic flights, particularly their tendency to follow daylight and fly from east to west. \n\nDomestic flights originating from the East Coast have high originating factors due to the network's construction. \n\nOnce we establish the basics of passenger modeling under this assumption, we can explore alternative solutions to refine our approach and accommodate more complex scenarios.\n\n#### Steps:\n\n1. Join seats of aircraft and factors to flight schedule\n2. Determine passengers for each flight\n3. Distribute the passengers across generic arrival curve (10 minute increment)\n\n\nThe arrival curve used here is just the 10 minute increment arrival curve provided, and airports is part of the nycflights13 package. We will use this to determine domestic/international stations. The result is the flight schedule with an arrival curve joined to each row. \n\n\n::: {.cell}\n\n```{.r .cell-code}\narrival_join_10_min <- arrival_curve |> \n  pivot_wider(names_from = minutes_prior, values_from = value) |> \n  mutate(\n    peak = name == 'peak_domestic_8am',\n    domestic = !str_detect(name, 'international')\n    ) \n\nairports <- airports |> \n  mutate(domestic = str_detect(tzone, 'America'))\n\njune27_base <- june27_flights |> \n  left_join(planes |> select(tailnum, seats), by = c('tailnum')) |> \n  left_join(operator_data, by = c('carrier')) |> \n  left_join(airports, by =c('dest' = 'faa')) |> \n  mutate(\n    peak = sched_dep_time <= 800, \n    # use median values for missing airline data\n    across(c(contains('factor'), avg_num_bags ), \\(x) replace_na(x, median(x, na.rm = TRUE)))\n  ) |> \n  mutate(\n    passengers = round(seats * load_factor)\n  ) |> \n  left_join(\n    # 10 minute arrival curve\n    arrival_join_10_min,\n    by = c('peak', 'domestic')\n  ) |> \n  select(carrier, origin, dest, dep_dttm, passengers, `10`:`240`)\n\n\njune27_base |> \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|carrier |origin |dest |dep_dttm            | passengers|    10|    20|     30|     40|    50|     60|     70|     80|     90|    100|    110|    120|    130|    140|    150|    160|    170|    180|    190|    200|    210|    220|    230|    240|\n|:-------|:------|:----|:-------------------|----------:|-----:|-----:|------:|------:|-----:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n|B6      |JFK    |MCO  |2013-06-27 21:46:00 |         18| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n|B6      |JFK    |FLL  |2013-06-27 21:55:00 |        180| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n|B6      |JFK    |BUF  |2013-06-27 21:10:00 |         18| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n|UA      |EWR    |CLE  |2013-06-27 20:21:00 |        127| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n|B6      |JFK    |BOS  |2013-06-27 23:00:00 |         18| 6e-04| 0.003| 0.0048| 0.0098| 0.021| 0.0403| 0.0619| 0.0816| 0.0959| 0.1025| 0.1008| 0.0925| 0.0795| 0.0644| 0.0509| 0.0394| 0.0306| 0.0236| 0.0183| 0.0143| 0.0114| 0.0092| 0.0074| 0.0363|\n\n</div>\n:::\n:::\n\n\n### Distribute demand\n\nFor the simple approach, all we will do is distribute the passenger vector across the columns of the arrival curve percentages. \n\n#### Steps:\n\n1. Multiply passenger column by all of the arrival curve columns\n2. Reshape the dataframe to a longer format so that each row represents a 10-minute interval per flight.\n3. Subtract that minute value from the departure datetime\n4. Group by the new model time and aggregate the sum of passengers. \n\n**Note:** The departure times are in minute granularity. We group them into 10-minute bins to align with the basic arrival curve. \n\n\n::: {.cell}\n\n```{.r .cell-code}\njune27_long <- june27_base |> \n  mutate(dep_dttm = if_else(minute(dep_dttm) %% 10 != 0 , dep_dttm - minutes(minute(dep_dttm) %% 10), dep_dttm)) |> \n  mutate(across(`10`:`240`, \\(x) x * passengers)) |> \n  pivot_longer(cols = `10`:`240`, names_to = 'minutes_prior', values_to = 'exp_passengers') |> \n  mutate(\n    model_time = dep_dttm - minutes(minutes_prior)\n  )\n\njune27_long |> \n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|carrier |origin |dest |dep_dttm            | passengers|minutes_prior | exp_passengers|model_time          |\n|:-------|:------|:----|:-------------------|----------:|:-------------|--------------:|:-------------------|\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|10            |         0.0762|2013-06-27 20:00:00 |\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|20            |         0.3810|2013-06-27 19:50:00 |\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|30            |         0.6096|2013-06-27 19:40:00 |\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|40            |         1.2446|2013-06-27 19:30:00 |\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|50            |         2.6670|2013-06-27 19:20:00 |\n|UA      |EWR    |MIA  |2013-06-27 20:10:00 |        127|60            |         5.1181|2013-06-27 19:10:00 |\n\n</div>\n:::\n\n```{.r .cell-code}\njune27_long |> \n  group_by(origin, model_time) |> \n  summarise(\n    expected_passengers = sum(exp_passengers, na.rm = TRUE),\n    .groups = 'drop'\n  ) |> \n  ggplot(aes(model_time, expected_passengers)) +\n  geom_line(linewidth = 2, aes(color = origin)) +\n  facet_wrap(~origin, ncol = 1) +\n  labs(\n    title = 'Expected Passengers',\n    x = \"Time\",\n    y = \"Expected passengers\"\n  ) +\n  scale_color_manual(values = station_colors) +\n  theme(legend.position = 'none')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n#### A better visualizaiton\n\nTo see the lagging effect of passengers arrivals relative to the departure time, you can visualize the passenger demand profile against the distribution of flights throughout the day. \n\n\n::: {.cell}\n\n```{.r .cell-code}\njune27_long |> \n  group_by(origin, model_time) |> \n  summarise(\n    expected_passengers = sum(exp_passengers, na.rm = TRUE),\n    .groups = 'drop'\n  ) |> \n  left_join(\n    june27_base |>   \n      mutate(dep_dttm = if_else(minute(dep_dttm) %% 10 != 0 , dep_dttm - minutes(minute(dep_dttm) %% 10), dep_dttm)) |> \n      count(dep_dttm, origin),\n    by = c('model_time' = 'dep_dttm', 'origin')\n  ) |> \n  mutate(n = n * 50) |> \n  #filter(origin == 'LGA') |> \n  ggplot(aes(model_time, color = origin, fill = origin)) +\n  geom_col(aes(y=n), alpha = 0.26) +\n  geom_line(aes(y=expected_passengers), linewidth = 2) +\n  scale_y_continuous(sec.axis = sec_axis(~./50, name = \"Flight Count\")) +\n  facet_wrap(~origin, ncol = 1) +\n  labs(\n    title = 'Distirbution of Passengers and Flights throughout the day',\n    y = 'Expected Passenger Demand',\n    x = 'Time',\n    color = NULL,\n    fill = NULL\n  ) +\n  theme(\n    legend.position = 'none',\n    plot.title = element_text(face = 'bold', size = 16)\n  ) +\n  scale_color_manual(values = station_colors)+\n  scale_fill_manual(values = station_colors)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### This is great, but where is the simulation\n\nWhat we did is the bare minimum to model passengers, and later bags, throughout the day. This approach is likely used in the PGDS study, and linear calculations are in my opinion overused in modeling facilities today. \n\n#### What approach should be used? \n\nEvery input can be sampled and simulated, and there are tradeoffs to consider with each approach. Using linear calculations is straightforward; for instance, you can easily explain that a flat load factor was used. However, this method falls short when trying to understand tail-end outcomes or disaster situations.\n\nWe'll start by simulating passengers from the arrival curve in the next post. \n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}